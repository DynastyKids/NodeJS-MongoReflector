{
  "openapi": "3.0.3",
  "info": {
    "description": "This is a MongoDB Backend reflector server. Supporting front-end only application to deploy their own backend via PAAS platform to transmit their database data.",
    "version": "1.0.0",
    "title": "Mongo Reflector",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://node-js-mongo-reflector.vercel.app"
    }
  ],
  "tags": [
    {
      "name": "Samples",
      "description": "GET requests are for user to check the sample JSON format that should be used in post requests"
    },
    {
      "name": "Requests",
      "description": "POST requests are actural method that user needs for sending requests."
    }
  ],
  "paths": {
    "/find": {
      "post": {
        "tags": ["Requests"],
        "summary": "Find data from MongoDB",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mongoURI": {
                    "type": "string",
                    "description": "MongoDB connection string",
                    "example": "mongodb://localhost:27017"
                  },
                  "dbName": {
                    "type": "string",
                    "description": "Name of the database",
                    "example": "testDB"
                  },
                  "collectionName": {
                    "type": "string",
                    "description": "Name of the collection",
                    "example": "testCollection"
                  },
                  "query": {
                    "type": "object",
                    "description": "MongoDB query object",
                    "example": {
                      "field": "value"
                    }
                  },
                  "page": {
                    "type": "integer",
                    "description": "Page number for pagination",
                    "example": 1
                  },
                  "pageSize": {
                    "type": "integer",
                    "description": "Number of records per page",
                    "example": 10
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "totalRecords": {
                          "type": "integer",
                          "description": "Total number of matching records"
                        },
                        "currentPage": {
                          "type": "integer",
                          "description": "Current page number"
                        },
                        "pageSize": {
                          "type": "integer",
                          "description": "Number of records per page"
                        },
                        "totalPages": {
                          "type": "integer",
                          "description": "Total number of pages"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": ["Samples"],
        "summary": "Example request to find data from MongoDB",
        "description": "Returns an example JSON body showing how to use the /find endpoint",
        "responses": {
          "200": {
            "description": "Example request for /find",
            "content": {
              "application/json": {
                "example": {
                  "description": "Find data example",
                  "method": "POST",
                  "url": "/find",
                  "requestBody": {
                    "mongoURI": "mongodb://localhost:27017",
                    "dbName": "testDB",
                    "collectionName": "testCollection",
                    "query": {
                      "field": "value"
                    },
                    "page": 1,
                    "pageSize": 10
                  }
                }
              }
            }
          }
        }
      }
    },
    "/update": {
      "post": {
        "tags": ["Requests"],
        "summary": "Update data in MongoDB",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mongoURI": {
                    "type": "string",
                    "description": "MongoDB connection string",
                    "example": "mongodb://localhost:27017"
                  },
                  "dbName": {
                    "type": "string",
                    "description": "Name of the database",
                    "example": "testDB"
                  },
                  "collectionName": {
                    "type": "string",
                    "description": "Name of the collection",
                    "example": "testCollection"
                  },
                  "query": {
                    "type": "object",
                    "description": "MongoDB query object",
                    "example": {
                      "field": "value"
                    }
                  },
                  "update": {
                    "type": "object",
                    "description": "MongoDB update object",
                    "example": {
                      "$set": {
                        "fieldToUpdate": "newValue"
                      }
                    }
                  },
                  "upsert": {
                    "type": "boolean",
                    "description": "Whether to insert a new document if no match is found",
                    "example": false
                  },
                  "multi": {
                    "type": "boolean",
                    "description": "Whether to update multiple documents",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "matchedCount": {
                      "type": "integer",
                      "description": "Number of matched documents"
                    },
                    "modifiedCount": {
                      "type": "integer",
                      "description": "Number of modified documents"
                    },
                    "upsertedCount": {
                      "type": "integer",
                      "description": "Number of upserted documents"
                    },
                    "upsertedId": {
                      "type": "string",
                      "description": "ID of the upserted document"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": ["Samples"],
        "summary": "Example request to update data in MongoDB",
        "description": "Returns an example JSON body showing how to use the /update endpoint",
        "responses": {
          "200": {
            "description": "Example request for /update",
            "content": {
              "application/json": {
                "example": {
                  "description": "Update data example",
                  "method": "POST",
                  "url": "/update",
                  "requestBody": {
                    "mongoURI": "mongodb://localhost:27017",
                    "dbName": "testDB",
                    "collectionName": "testCollection",
                    "query": {
                      "field": "value"
                    },
                    "update": {
                      "$set": {
                        "fieldToUpdate": "newValue"
                      }
                    },
                    "upsert": true,
                    "multi": false
                  }
                }
              }
            }
          }
        }
      }
    },
    "/delete": {
      "post": {
        "tags": ["Requests"],
        "summary": "Delete data from MongoDB",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "mongoURI": {
                    "type": "string",
                    "description": "MongoDB connection string",
                    "example": "mongodb://localhost:27017"
                  },
                  "dbName": {
                    "type": "string",
                    "description": "Name of the database",
                    "example": "testDB"
                  },
                  "collectionName": {
                    "type": "string",
                    "description": "Name of the collection",
                    "example": "testCollection"
                  },
                  "query": {
                    "type": "object",
                    "description": "MongoDB query object to match documents for deletion",
                    "example": {
                      "field": "value"
                    }
                  },
                  "multi": {
                    "type": "boolean",
                    "description": "Whether to delete multiple documents",
                    "example": false
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Delete operation successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedCount": {
                      "type": "integer",
                      "description": "Number of deleted documents"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "500": {
            "description": "Server error"
          }
        }
      },
      "get": {
        "tags": ["Samples"],
        "summary": "Example request to delete data in MongoDB",
        "description": "Returns an example JSON body showing how to use the /delete endpoint",
        "responses": {
          "200": {
            "description": "Example request for /delete",
            "content": {
              "application/json": {
                "example": {
                  "description": "Delete data example",
                  "method": "POST",
                  "url": "/delete",
                  "requestBody": {
                    "mongoURI": "mongodb://localhost:27017",
                    "dbName": "testDB",
                    "collectionName": "testCollection",
                    "query": {
                      "field": "value"
                    },
                    "multi": false
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
